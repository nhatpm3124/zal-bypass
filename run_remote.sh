#!/bin/bash
# Phone Number Search Tool - Remote Runner
# Ch·∫°y tr·ª±c ti·∫øp t·ª´ GitHub m√† kh√¥ng c·∫ßn c√†i ƒë·∫∑t

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_URL="https://github.com/your-username/bypass-phone.git"
TEMP_DIR="/tmp/bypass-phone-$(date +%s)"
PYTHON_CMD="python3"

print_header() {
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}üîç Phone Number Search Tool - Remote Runner${NC}"
    echo -e "${BLUE}================================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_info() {
    echo -e "${BLUE}üí° $1${NC}"
}

cleanup() {
    print_info "ƒêang d·ªçn d·∫πp..."
    rm -rf "$TEMP_DIR"
    print_success "D·ªçn d·∫πp ho√†n t·∫•t!"
}

trap cleanup EXIT

check_dependencies() {
    print_info "Ki·ªÉm tra dependencies..."
    
    # Check Python
    if command -v python3 &> /dev/null; then
        PYTHON_CMD="python3"
        print_success "Python3 ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    elif command -v python &> /dev/null; then
        PYTHON_CMD="python"
        print_success "Python ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    else
        print_error "Python kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!"
        print_info "Vui l√≤ng c√†i ƒë·∫∑t Python 3.7+ t·ª´ https://python.org"
        exit 1
    fi
    
    # Check Git
    if ! command -v git &> /dev/null; then
        print_error "Git kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!"
        print_info "Vui l√≤ng c√†i ƒë·∫∑t Git t·ª´ https://git-scm.com"
        exit 1
    fi
    
    # Check Chrome
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if [[ ! -d "/Applications/Google Chrome.app" ]]; then
            print_warning "Chrome kh√¥ng t√¨m th·∫•y!"
            print_info "Vui l√≤ng c√†i ƒë·∫∑t Chrome t·ª´ https://chrome.google.com"
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        if ! command -v google-chrome &> /dev/null && ! command -v chromium &> /dev/null; then
            print_warning "Chrome/Chromium kh√¥ng t√¨m th·∫•y!"
            print_info "Vui l√≤ng c√†i ƒë·∫∑t Chrome ho·∫∑c Chromium"
        fi
    fi
}

download_and_setup() {
    print_info "ƒêang t·∫£i xu·ªëng t·ª´ GitHub..."
    git clone "$REPO_URL" "$TEMP_DIR"
    
    cd "$TEMP_DIR"
    
    print_info "ƒêang c√†i ƒë·∫∑t dependencies..."
    $PYTHON_CMD -m pip install -r requirements.txt --quiet
    
    print_success "Thi·∫øt l·∫≠p ho√†n t·∫•t!"
}

show_menu() {
    echo ""
    echo -e "${GREEN}üìã Ch·ªçn ch·∫ø ƒë·ªô ch·∫°y:${NC}"
    echo -e "${BLUE}1) Interactive Mode (Nh·∫≠p th√¥ng tin t·ª´ng b∆∞·ªõc)${NC}"
    echo -e "${BLUE}2) Quick Test (Test nhanh v·ªõi Google)${NC}"
    echo -e "${BLUE}3) Config Mode (T·∫°o config file)${NC}"
    echo -e "${BLUE}4) Exit${NC}"
    echo ""
    read -p "Nh·∫≠p l·ª±a ch·ªçn (1-4): " choice
    
    case $choice in
        1)
            print_info "Ch·∫°y Interactive Mode..."
            $PYTHON_CMD phone_search.py
            ;;
        2)
            print_info "Ch·∫°y Quick Test..."
            $PYTHON_CMD quick_start.py
            ;;
        3)
            print_info "Ch·∫°y Config Mode..."
            
            # Create config file
            echo "T·∫°o file config.json..."
            cp config_example.json config.json
            
            # Edit config
            echo "Ch·ªânh s·ª≠a file config.json (nh·∫•n Enter ƒë·ªÉ s·ª≠ d·ª•ng editor):"
            read -p "Editor (nano/vim/code): " editor
            
            if [[ -z "$editor" ]]; then
                if command -v nano &> /dev/null; then
                    nano config.json
                elif command -v vim &> /dev/null; then
                    vim config.json
                else
                    print_warning "Kh√¥ng t√¨m th·∫•y editor, m·ªü file theo c√°ch th·ªß c√¥ng"
                    echo "File config t·∫°i: $TEMP_DIR/config.json"
                    read -p "Nh·∫•n Enter sau khi ch·ªânh s·ª≠a xong..."
                fi
            else
                $editor config.json
            fi
            
            # Run with config
            print_info "Ch·∫°y v·ªõi config file..."
            $PYTHON_CMD run_with_config.py config.json
            ;;
        4)
            print_info "Tho√°t ch∆∞∆°ng tr√¨nh"
            exit 0
            ;;
        *)
            print_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
            show_menu
            ;;
    esac
}

main() {
    print_header
    
    check_dependencies
    download_and_setup
    
    show_menu
    
    echo ""
    echo -e "${GREEN}üéâ Ho√†n th√†nh!${NC}"
    echo -e "${BLUE}üí° ƒê·ªÉ c√†i ƒë·∫∑t vƒ©nh vi·ªÖn, ch·∫°y:${NC}"
    echo -e "${BLUE}curl -sSL https://raw.githubusercontent.com/your-username/bypass-phone/main/install.sh | bash${NC}"
}

# Run main function
main "$@" 